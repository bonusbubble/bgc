CC=clang
CFLAGS=-g -Wall -Wextra -pedantic -I../include -fPIC -fprofile-arcs -ftest-coverage
LDFLAGS=-g -L../build/src -L../build/test --coverage -fPIC
LDLIBS=
RM=rm
BUILD_DIR=../build
DIST_DIR=../dist
LIB_DIR=../lib

ROOT=/usr/local

PROJECT_NAME=bgc

AUX_PROJECT_NAME=$(PROJECT_NAME)x

LIB_NAME=lib$(PROJECT_NAME)
STATIC_LIBRARY=$(LIB_NAME).a
DYNAMIC_LIBRARY=$(LIB_NAME).so

STATIC_LIBRARY_PATH=$(LIB_DIR)/$(STATIC_LIBRARY)
DYNAMIC_LIBRARY_PATH=$(LIB_DIR)/$(DYNAMIC_LIBRARY)

INSTALL_STATIC_LIBRARY_PATH=$(ROOT)/lib/$(STATIC_LIBRARY)
INSTALL_DYNAMIC_LIBRARY_PATH=$(ROOT)/lib/$(DYNAMIC_LIBRARY)

ROOT_INSTALL_INCLUDE_DIR=$(ROOT)/include
INSTALL_INCLUDE_DIR=$(ROOT_INSTALL_INCLUDE_DIR)/$(PROJECT_NAME)
AUXILIARY_INSTALL_INCLUDE_DIR=$(INSTALL_INCLUDE_DIR)/x

LIBS=$(STATIC_LIBRARY_PATH) $(DYNAMIC_LIBRARY_PATH)

.PHONY: all
all: clean $(LIBS)

$(BUILD_DIR)/obj/%.o: %.c
	mkdir -p $(@D)
	$(CC) $(CFLAGS) -MMD -c $< -o $@

SRCS=lib$(PROJECT_NAME).c
OBJS=$(SRCS:%.c=$(BUILD_DIR)/obj/%.o)
DEPS=$(OBJS:%.o=%.d)

$(STATIC_LIBRARY_PATH): $(OBJS)
	mkdir -p $(@D)
	ar rcs $@ $^

$(DYNAMIC_LIBRARY_PATH): $(OBJS)
	mkdir -p $(@D)
	$(CC) $(LDFLAGS) $(LDLIBS) -shared -fPIC $^ -o $@

clean:
	$(RM) -f $(OBJS) $(DEPS)

distclean: clean
	$(RM) -f $(LIB_DIR)/$(STATIC_LIBRARY)
	$(RM) -f $(LIB_DIR)/$(DYNAMIC_LIBRARY)
	$(RM) -f $(LIB_DIR)/*gcda
	$(RM) -f $(LIB_DIR)/*gcno

install: $(LIBS)
	sudo cp -f $(STATIC_LIBRARY_PATH) $(INSTALL_STATIC_LIBRARY_PATH)
	sudo cp -f $(DYNAMIC_LIBRARY_PATH) $(INSTALL_DYNAMIC_LIBRARY_PATH)
	rm -rf $(INSTALL_INCLUDE_DIR)
	mkdir -p $(INSTALL_INCLUDE_DIR)
	sudo cp -f *.h $(ROOT_INSTALL_INCLUDE_DIR)/
	rm -rf $(AUXILIARY_INSTALL_INCLUDE_DIR)
	sudo cp -rf x $(AUXILIARY_INSTALL_INCLUDE_DIR)

uninstall:
	sudo rm -f $(INSTALL_STATIC_LIBRARY_PATH)
	sudo rm -f $(INSTALL_DYNAMIC_LIBRARY_PATH)
	sudo rm -r $(ROOT_INSTALL_INCLUDE_DIR)/$(PROJECT_NAME)*.h
	sudo rm -rf $(INSTALL_INCLUDE_DIR)
	sudo rm -rf $(AUXILIARY_INSTALL_INCLUDE_DIR)
